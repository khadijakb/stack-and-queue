import java.util.EmptyStackException;
import java.util.Scanner;

public class Queue<T>{
    private Object[] array;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    public Queue(int capacity){
        this.capacity=capacity;
        array=new Object [capacity];
        front=0;
        rear=-1;
        size=0;
    }
    public boolean isEmpty(){
        return size==0;
    }
    public boolean isFull(){
        return size==capacity;
    }
    public T dequeue(){
        if(isEmpty()){
            throw new EmptyStackException();
        }
        T item=(T)array[front];
        array[front]=null;
        front=(front+1)%capacity;
        size--;
        return item;
    }
    public void enqueue(T item){
        if(isFull()){
            System.out.println("queue is full !!");
            return;

        }
        rear=(rear+1)%capacity;
        array[rear]=item;
        size++;
    }
    public T peek(){
        if (isEmpty()){
            throw new EmptyStackException();
        }
        return(T)array[front];

    }
    public int size(){
        return size;
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the queue");
        Queue<Integer> queue = new Queue<>(sc.nextInt());
        while (!queue.isFull()) {
            System.out.print("Enter an integer to push onto the Queue: ");
            int value = sc.nextInt();
            queue.enqueue(value);
        }
        System.out.println("front element of the queue : "+ queue.peek());
        while (!queue.isEmpty()) {
            System.out.println("dequeued: " + queue.dequeue());
        }
    }
}
