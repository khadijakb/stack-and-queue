import java.util.EmptyStackException;
import java.util.Scanner;

public class Generic_Stack<T> {
    private T[] array;
    private int top;
    private int capacity;

    public Generic_Stack(int size) {
        capacity = size;
        array = (T[]) new Object[capacity];
        top = -1;
    }

    public boolean IsEmpty() {
        return top == -1;
    }

    public boolean IsFull() {
        return top == capacity - 1;
    }

    public void push(T item) {
        if (IsFull()) {
            System.out.println("Stack is full. Cannot push.");
            return;
        }
        array[++top] = item;
    }

    public T pop() {
        if (IsEmpty()) {
            throw new EmptyStackException();
        }
        T item = array[top];
        array[top] = null;
        top--;
        return item;
    }

    public T peek() {
        if (IsEmpty()) {
            throw new EmptyStackException();
        }
        return array[top];
    }

    public int size() {
        return top + 1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the stack");
        Generic_Stack<Integer> stack = new Generic_Stack<>(sc.nextInt());

        // Loop to accept values from the user and push them onto the stack
        while (!stack.IsFull()) {
            System.out.print("Enter an integer to push onto the stack: ");
            int value = sc.nextInt();
            stack.push(value);
        }

        System.out.println("Top element of the stack: " + stack.peek());

        System.out.println("Popping elements from the stack:");
        while (!stack.IsEmpty()) {
            System.out.println("Popped: " + stack.pop());
        }
    }
}
