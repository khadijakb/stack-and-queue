/**
 * This program checks the balance of parentheses in a given input string using a stack.
 */
import java.util.Stack;

public class ParenthesesChecker {
    /**
     * Checks if the parentheses in the input string are balanced.
     *
     * @param input The input string containing parentheses.
     * @return true if the parentheses are balanced, false otherwise.
     */
    public static boolean areParenthesesBalanced(String input) {
        Stack<Character> stack = new Stack<>();

        for (char c : input.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if (c == ')' || c == '}' || c == ']') {
                if (stack.isEmpty()) {
                    return false; // Unmatched closing parenthesis
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                    return false; // Mismatched opening and closing parenthesis
                }
            }
        }

        return stack.isEmpty(); // Stack should be empty if all parentheses are balanced
    }

    /**
     * The main method demonstrates how to use the ParenthesesChecker to check the
     * validity of different input strings containing parentheses.
     *
     * @param args The command-line arguments (not used in this program).
     */
    public static void main(String[] args) {
        String input1 = "((({})))";
        String input2 = "({[)]}";
        String input3 = "{[()]}";

        System.out.println("Input 1 is balanced: " + areParenthesesBalanced(input1)); // true
        System.out.println("Input 2 is balanced: " + areParenthesesBalanced(input2)); // false
        System.out.println("Input 3 is balanced: " + areParenthesesBalanced(input3)); // true
    }
}

